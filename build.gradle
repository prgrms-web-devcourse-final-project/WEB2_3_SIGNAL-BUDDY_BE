import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco' // JaCoCo 플러그인
    id 'com.epages.restdocs-api-spec' version '0.19.2'  // openAPI 플러그인
    id 'org.hidetake.swagger.generator' version '2.19.2'    // swaggerUI 플러그인
    id 'org.sonarqube' version '6.0.1.5171' // SonarQube 플러그인
}

group = 'org.programmers'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    // Scheduling Lock
    implementation 'net.javacrumbs.shedlock:shedlock-spring:6.2.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-redis-spring:6.2.0'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:mariadb:1.19.7"
    testImplementation 'org.springframework.security:spring-security-test'

    // Hibernate-spatial
    implementation 'org.hibernate:hibernate-spatial:6.6.3.Final'

    // Hibernate-util
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.2'

    // Mapstuct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // oAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Monitoring
    implementation ("org.springframework.boot:spring-boot-starter-actuator")
    runtimeOnly ("io.micrometer:micrometer-registry-prometheus")

    // Amazon S3
    implementation 'software.amazon.awssdk:s3:2.30.3'

    // Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Swagger + REST Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'
    swaggerUI 'org.webjars:swagger-ui:3.52.5'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
}

// JaCoCo 버전 설정
jacoco {
    toolVersion = '0.8.12'
}

// QClass 패턴
def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
    QDomains.add(qPattern + '*')
}

// MapStruct 패턴
def MapStruct = [
        "*.*Mapper*"
]

// 측정 안하고 싶은 패턴
def jacocoExcludePatterns = [
        "*.*Application*",
        "*.*Config*",
        "*.*Exception*",
        "*.*ErrorCode*",
        "*.*Request*",
        "*.*Response*",
        "*.*Interceptor*",
        "*.*Filter*",
        "*.*Handler*",
        "*.*Resolver*",
        "*.*DataInitializer*",
        "*.*RestDocsFormatGenerators*",
        "*.dto.*",
        "*.config.*",
        "*.entity.*",
        "*.test.*",
        "*.resources.*"
]

// 코드 커버리지 기준 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            // Rule 활성화
            enabled = true

            // 클래스 단위로 체크
            element = 'CLASS'

            // 라인 커버리지 기준
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00  // 커버리지 기준 20% 이상
            }

            // 브랜치 커버리지 기
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00  // 커버리지 기준 20% 이상
            }

            excludes = jacocoExcludePatterns + QDomains + MapStruct
        }
    }
}

def jacocoDir = layout.buildDirectory.dir("reports/")

// 결과 리포트 설정
jacocoTestReport {
    dependsOn test	// 테스트가 수행되어야만 리포트를 생성할 수 있도록 설정

    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)

        // 리포트 생성 위치
        html.destination jacocoDir.get().file("jacoco/index.html").asFile
        xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
    }

    finalizedBy jacocoTestCoverageVerification
}

tasks.named('test') {
    systemProperty('spring.profiles.active', 'test')
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

/* deploy 서브 모듈에 있는 config 파일들을 resources로 복사 */
task copyYaml(type: Copy) {
    copy {
        from './submodule/config'
        include '*.yml'
        into 'src/main/resources'
    }
}

// Querydsl 빌드 옵션 (옵셔널)
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

swaggerSources {
    sample {
        setInputFile(file("${buildDir}/api-spec/openapi3.yaml"))
    }
}

// openapi 작업 추가
openapi3 {
    servers = [
            {
                url = "https://52.79.71.9.nip.io"
                description = "Develop Server"
            },
            {
                url = "http://localhost:8080"
                description = "Local Server"
            }
    ]
    title = "Signal Buddy API 문서"
    description = "Signal Buddy API Docs"
    version = "0.0.1"
    format = "yaml"
}

// openapi3가 먼저 실행 - doFirst를 통한 Header 설정
tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

        def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    bearerAuth:\n" +  \
                                      "      type: http\n" +  \
                                      "      scheme: bearer\n" +  \
                                      "      bearerFormat: JWT\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "      description: \"Use 'your-access-token' as the value of the Authorization header\"\n" + \
                                      "security:\n" +
                "  - bearerAuth: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

tasks.register('copyDocument', Copy) {
    dependsOn generateSwaggerUISample

    from file("build/swagger-ui-sample/")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn copyDocument
    from("src/main/resources/static/docs") {
        into "static/docs" // JAR 내부에서 접근할 경로
    }
}

// SonarQube 설정
sonar {
    properties {
        property "sonar.projectKey", "prgrms-web-devcourse-final-project_WEB2_3_SIGNAL-BUDDY_BE"
        property "sonar.organization", "prgrms-web-devcourse-final-project"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', jacocoDir.get().file("jacoco/index.xml").asFile
    }
}